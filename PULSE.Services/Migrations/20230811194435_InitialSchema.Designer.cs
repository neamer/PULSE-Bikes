// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PULSE.Services.Database;

#nullable disable

namespace PULSE.Services.Migrations
{
    [DbContext(typeof(PULSEContext))]
    [Migration("20230811194435_InitialSchema")]
    partial class InitialSchema
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("PULSE.Services.Database.AvailableSize", b =>
                {
                    b.Property<int>("BicycleSizeId")
                        .HasColumnType("int")
                        .HasColumnName("BicycleSizeID");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.Property<int?>("AvailableQty")
                        .HasColumnType("int");

                    b.HasKey("BicycleSizeId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("AvailableSize", (string)null);
                });

            modelBuilder.Entity("PULSE.Services.Database.BicycleSize", b =>
                {
                    b.Property<int>("BicycleSizeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BicycleSizeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BicycleSizeId"), 1L, 1);

                    b.Property<string>("Size")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("BicycleSizeId");

                    b.ToTable("BicycleSize", (string)null);
                });

            modelBuilder.Entity("PULSE.Services.Database.Brand", b =>
                {
                    b.Property<int>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BrandID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BrandId"), 1L, 1);

                    b.Property<string>("Name")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("BrandId");

                    b.ToTable("Brand", (string)null);
                });

            modelBuilder.Entity("PULSE.Services.Database.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordSalt")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("ShippingInfoId")
                        .HasColumnType("int")
                        .HasColumnName("ShippingInfoID");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Username")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CustomerId");

                    b.HasIndex("ShippingInfoId");

                    b.ToTable("Customer", (string)null);
                });

            modelBuilder.Entity("PULSE.Services.Database.OrderDetail", b =>
                {
                    b.Property<int>("OrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OrderDetailID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderDetailId"), 1L, 1);

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal?>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderDetailId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetail", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("OrderDetail");
                });

            modelBuilder.Entity("PULSE.Services.Database.OrderHeader", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"), 1L, 1);

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<bool?>("Delivery")
                        .HasColumnType("bit");

                    b.Property<bool?>("OnlineOrder")
                        .HasColumnType("bit");

                    b.Property<string>("OrderNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("PaymentId")
                        .HasColumnType("int")
                        .HasColumnName("PaymentID");

                    b.Property<decimal?>("ShippingConst")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ShippingInfoId")
                        .HasColumnType("int")
                        .HasColumnName("ShippingInfoID");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("TimeDelivered")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("TimePacked")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("TimeProcessed")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("TimeShipped")
                        .HasColumnType("datetime");

                    b.HasKey("OrderId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PaymentId");

                    b.HasIndex("ShippingInfoId");

                    b.ToTable("OrderHeader", (string)null);
                });

            modelBuilder.Entity("PULSE.Services.Database.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PaymentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"), 1L, 1);

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Method")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime?>("TimeOfPayment")
                        .HasColumnType("datetime");

                    b.HasKey("PaymentId");

                    b.ToTable("Payment", (string)null);
                });

            modelBuilder.Entity("PULSE.Services.Database.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"), 1L, 1);

                    b.Property<int?>("BrandId")
                        .HasColumnType("int")
                        .HasColumnName("BrandID");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Model")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ProductCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("ProductCategoryID");

                    b.Property<string>("ProductNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("ThumbImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("ProductId");

                    b.HasIndex("BrandId");

                    b.ToTable("Product", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("Product");
                });

            modelBuilder.Entity("PULSE.Services.Database.ProductCategory", b =>
                {
                    b.Property<int>("ProductCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProductCategoryID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductCategoryId"), 1L, 1);

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ProductCategoryId");

                    b.ToTable("ProductCategory", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("ProductCategory");
                });

            modelBuilder.Entity("PULSE.Services.Database.ProductImage", b =>
                {
                    b.Property<int>("ProductImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProductImageID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductImageId"), 1L, 1);

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.HasKey("ProductImageId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImage", (string)null);
                });

            modelBuilder.Entity("PULSE.Services.Database.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"), 1L, 1);

                    b.Property<string>("Name")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("RoleId");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("PULSE.Services.Database.Servicing", b =>
                {
                    b.Property<int>("ServicingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ServicingID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServicingId"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<string>("CustomerRequest")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("LabourCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("OfferDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("OnlinePayment")
                        .HasColumnType("bit");

                    b.Property<int?>("PaymentId")
                        .HasColumnType("int")
                        .HasColumnName("PaymentID");

                    b.Property<string>("ServicingNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("ServicingId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PaymentId");

                    b.ToTable("Servicing", (string)null);
                });

            modelBuilder.Entity("PULSE.Services.Database.ServicingPart", b =>
                {
                    b.Property<int>("ServicingId")
                        .HasColumnType("int")
                        .HasColumnName("ServicingID");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal?>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ServicingId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("ServicingPart", (string)null);
                });

            modelBuilder.Entity("PULSE.Services.Database.ShippingInfo", b =>
                {
                    b.Property<int>("ShippingInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ShippingInfoID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShippingInfoId"), 1L, 1);

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Country")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("StateOrProvince")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("StreetAddress")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.HasKey("ShippingInfoId");

                    b.ToTable("ShippingInfo", (string)null);
                });

            modelBuilder.Entity("PULSE.Services.Database.staff", b =>
                {
                    b.Property<int>("StaffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StaffID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffId"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DateOfEmployment")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordSalt")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Username")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("StaffId");

                    b.HasIndex("RoleId");

                    b.ToTable("Staff", (string)null);
                });

            modelBuilder.Entity("PULSE.Services.Database.Bicycle", b =>
                {
                    b.HasBaseType("PULSE.Services.Database.Product");

                    b.Property<int?>("ProductionYear")
                        .HasColumnType("int");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("WheelSize")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)");

                    b.HasIndex("ProductCategoryId");

                    b.HasDiscriminator().HasValue("Bicycle");
                });

            modelBuilder.Entity("PULSE.Services.Database.BicycleCategory", b =>
                {
                    b.HasBaseType("PULSE.Services.Database.ProductCategory");

                    b.HasDiscriminator().HasValue("Bicycle");
                });

            modelBuilder.Entity("PULSE.Services.Database.Gear", b =>
                {
                    b.HasBaseType("PULSE.Services.Database.Product");

                    b.Property<int?>("AvailableQty")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("int")
                        .HasColumnName("AvailableQty");

                    b.HasIndex("ProductCategoryId");

                    b.HasDiscriminator().HasValue("Gear");
                });

            modelBuilder.Entity("PULSE.Services.Database.GearCategory", b =>
                {
                    b.HasBaseType("PULSE.Services.Database.ProductCategory");

                    b.HasDiscriminator().HasValue("Gear");
                });

            modelBuilder.Entity("PULSE.Services.Database.OrderDetailBicycle", b =>
                {
                    b.HasBaseType("PULSE.Services.Database.OrderDetail");

                    b.Property<int?>("BicycleSizeId")
                        .HasColumnType("int")
                        .HasColumnName("BicycleSizeID");

                    b.HasIndex("BicycleSizeId");

                    b.HasDiscriminator().HasValue("Bicycle");
                });

            modelBuilder.Entity("PULSE.Services.Database.OrderDetailGear", b =>
                {
                    b.HasBaseType("PULSE.Services.Database.OrderDetail");

                    b.HasDiscriminator().HasValue("Gear");
                });

            modelBuilder.Entity("PULSE.Services.Database.OrderDetailPart", b =>
                {
                    b.HasBaseType("PULSE.Services.Database.OrderDetail");

                    b.HasDiscriminator().HasValue("Part");
                });

            modelBuilder.Entity("PULSE.Services.Database.Part", b =>
                {
                    b.HasBaseType("PULSE.Services.Database.Product");

                    b.Property<int?>("AvailableQty")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("int")
                        .HasColumnName("AvailableQty");

                    b.HasIndex("ProductCategoryId");

                    b.HasDiscriminator().HasValue("Part");
                });

            modelBuilder.Entity("PULSE.Services.Database.PartCategory", b =>
                {
                    b.HasBaseType("PULSE.Services.Database.ProductCategory");

                    b.HasDiscriminator().HasValue("Part");
                });

            modelBuilder.Entity("PULSE.Services.Database.AvailableSize", b =>
                {
                    b.HasOne("PULSE.Services.Database.BicycleSize", "BicycleSize")
                        .WithMany("AvailableSizes")
                        .HasForeignKey("BicycleSizeId")
                        .IsRequired()
                        .HasConstraintName("FK_AvailableSize_BicycleSize");

                    b.HasOne("PULSE.Services.Database.Bicycle", "Product")
                        .WithMany("AvailableSizes")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_AvailableSize_Bicycle");

                    b.Navigation("BicycleSize");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("PULSE.Services.Database.Customer", b =>
                {
                    b.HasOne("PULSE.Services.Database.ShippingInfo", "ShippingInfo")
                        .WithMany("Customers")
                        .HasForeignKey("ShippingInfoId")
                        .HasConstraintName("FK_Customer_ShippingInfo");

                    b.Navigation("ShippingInfo");
                });

            modelBuilder.Entity("PULSE.Services.Database.OrderDetail", b =>
                {
                    b.HasOne("PULSE.Services.Database.OrderHeader", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_OrderDetail_Order");

                    b.HasOne("PULSE.Services.Database.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_OrderDetail_Product");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("PULSE.Services.Database.OrderHeader", b =>
                {
                    b.HasOne("PULSE.Services.Database.Customer", "Customer")
                        .WithMany("OrderHeaders")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_OrderHeader_Customer");

                    b.HasOne("PULSE.Services.Database.Payment", "Payment")
                        .WithMany("OrderHeaders")
                        .HasForeignKey("PaymentId")
                        .HasConstraintName("FK_OrderHeader_Payment");

                    b.HasOne("PULSE.Services.Database.ShippingInfo", "ShippingInfo")
                        .WithMany("OrderHeaders")
                        .HasForeignKey("ShippingInfoId")
                        .HasConstraintName("FK_OrderHeader_ShippingInfo");

                    b.Navigation("Customer");

                    b.Navigation("Payment");

                    b.Navigation("ShippingInfo");
                });

            modelBuilder.Entity("PULSE.Services.Database.Product", b =>
                {
                    b.HasOne("PULSE.Services.Database.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .HasConstraintName("FK_Product_Brand");

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("PULSE.Services.Database.ProductImage", b =>
                {
                    b.HasOne("PULSE.Services.Database.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_ProductImage_Product");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("PULSE.Services.Database.Servicing", b =>
                {
                    b.HasOne("PULSE.Services.Database.Customer", "Customer")
                        .WithMany("Servicings")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_Servicing_Customer");

                    b.HasOne("PULSE.Services.Database.Payment", "Payment")
                        .WithMany("Servicings")
                        .HasForeignKey("PaymentId")
                        .HasConstraintName("FK_Servicing_Payment");

                    b.Navigation("Customer");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("PULSE.Services.Database.ServicingPart", b =>
                {
                    b.HasOne("PULSE.Services.Database.Product", "Product")
                        .WithMany("ServicingParts")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_ServicingPart_Part");

                    b.HasOne("PULSE.Services.Database.Servicing", "Servicing")
                        .WithMany("ServicingParts")
                        .HasForeignKey("ServicingId")
                        .IsRequired()
                        .HasConstraintName("FK_ServicingPart_Servicing");

                    b.Navigation("Product");

                    b.Navigation("Servicing");
                });

            modelBuilder.Entity("PULSE.Services.Database.staff", b =>
                {
                    b.HasOne("PULSE.Services.Database.Role", "Role")
                        .WithMany("staff")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_Staff_Role");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("PULSE.Services.Database.Bicycle", b =>
                {
                    b.HasOne("PULSE.Services.Database.BicycleCategory", "ProductCategory")
                        .WithMany("Bicycle")
                        .HasForeignKey("ProductCategoryId")
                        .HasConstraintName("FK_Product_ProductCategory");

                    b.Navigation("ProductCategory");
                });

            modelBuilder.Entity("PULSE.Services.Database.Gear", b =>
                {
                    b.HasOne("PULSE.Services.Database.GearCategory", "ProductCategory")
                        .WithMany("Gear")
                        .HasForeignKey("ProductCategoryId")
                        .HasConstraintName("FK_Product_ProductCategory");

                    b.Navigation("ProductCategory");
                });

            modelBuilder.Entity("PULSE.Services.Database.OrderDetailBicycle", b =>
                {
                    b.HasOne("PULSE.Services.Database.BicycleSize", "BicycleSize")
                        .WithMany("OrderDetails")
                        .HasForeignKey("BicycleSizeId")
                        .HasConstraintName("FK_OrderDetail_BicycleSize");

                    b.Navigation("BicycleSize");
                });

            modelBuilder.Entity("PULSE.Services.Database.Part", b =>
                {
                    b.HasOne("PULSE.Services.Database.PartCategory", "ProductCategory")
                        .WithMany("Part")
                        .HasForeignKey("ProductCategoryId")
                        .HasConstraintName("FK_Product_ProductCategory");

                    b.Navigation("ProductCategory");
                });

            modelBuilder.Entity("PULSE.Services.Database.BicycleSize", b =>
                {
                    b.Navigation("AvailableSizes");

                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("PULSE.Services.Database.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("PULSE.Services.Database.Customer", b =>
                {
                    b.Navigation("OrderHeaders");

                    b.Navigation("Servicings");
                });

            modelBuilder.Entity("PULSE.Services.Database.OrderHeader", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("PULSE.Services.Database.Payment", b =>
                {
                    b.Navigation("OrderHeaders");

                    b.Navigation("Servicings");
                });

            modelBuilder.Entity("PULSE.Services.Database.Product", b =>
                {
                    b.Navigation("OrderDetails");

                    b.Navigation("ProductImages");

                    b.Navigation("ServicingParts");
                });

            modelBuilder.Entity("PULSE.Services.Database.Role", b =>
                {
                    b.Navigation("staff");
                });

            modelBuilder.Entity("PULSE.Services.Database.Servicing", b =>
                {
                    b.Navigation("ServicingParts");
                });

            modelBuilder.Entity("PULSE.Services.Database.ShippingInfo", b =>
                {
                    b.Navigation("Customers");

                    b.Navigation("OrderHeaders");
                });

            modelBuilder.Entity("PULSE.Services.Database.Bicycle", b =>
                {
                    b.Navigation("AvailableSizes");
                });

            modelBuilder.Entity("PULSE.Services.Database.BicycleCategory", b =>
                {
                    b.Navigation("Bicycle");
                });

            modelBuilder.Entity("PULSE.Services.Database.GearCategory", b =>
                {
                    b.Navigation("Gear");
                });

            modelBuilder.Entity("PULSE.Services.Database.PartCategory", b =>
                {
                    b.Navigation("Part");
                });
#pragma warning restore 612, 618
        }
    }
}
