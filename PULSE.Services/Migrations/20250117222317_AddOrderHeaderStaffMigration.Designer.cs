// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PULSE.Services.Data;

#nullable disable

namespace PULSE.Services.Migrations
{
    [DbContext(typeof(PULSEContext))]
    [Migration("20250117222317_AddOrderHeaderStaffMigration")]
    partial class AddOrderHeaderStaffMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("PULSE.Services.Data.AvailableSize", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AvailableQty")
                        .HasColumnType("int");

                    b.Property<int>("BicycleSizeId")
                        .HasColumnType("int")
                        .HasColumnName("BicycleSizeID");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.HasKey("Id");

                    b.HasIndex("BicycleSizeId");

                    b.HasIndex("ProductId");

                    b.ToTable("AvailableSize", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AvailableQty = 10,
                            BicycleSizeId = 1,
                            ProductId = 1
                        },
                        new
                        {
                            Id = 2,
                            AvailableQty = 5,
                            BicycleSizeId = 2,
                            ProductId = 1
                        },
                        new
                        {
                            Id = 3,
                            AvailableQty = 8,
                            BicycleSizeId = 3,
                            ProductId = 2
                        },
                        new
                        {
                            Id = 4,
                            AvailableQty = 7,
                            BicycleSizeId = 4,
                            ProductId = 2
                        },
                        new
                        {
                            Id = 5,
                            AvailableQty = 12,
                            BicycleSizeId = 1,
                            ProductId = 3
                        },
                        new
                        {
                            Id = 6,
                            AvailableQty = 8,
                            BicycleSizeId = 3,
                            ProductId = 3
                        },
                        new
                        {
                            Id = 7,
                            AvailableQty = 6,
                            BicycleSizeId = 4,
                            ProductId = 4
                        },
                        new
                        {
                            Id = 8,
                            AvailableQty = 14,
                            BicycleSizeId = 1,
                            ProductId = 5
                        },
                        new
                        {
                            Id = 9,
                            AvailableQty = 11,
                            BicycleSizeId = 2,
                            ProductId = 5
                        },
                        new
                        {
                            Id = 10,
                            AvailableQty = 9,
                            BicycleSizeId = 3,
                            ProductId = 6
                        },
                        new
                        {
                            Id = 11,
                            AvailableQty = 5,
                            BicycleSizeId = 4,
                            ProductId = 6
                        },
                        new
                        {
                            Id = 12,
                            AvailableQty = 10,
                            BicycleSizeId = 1,
                            ProductId = 7
                        },
                        new
                        {
                            Id = 13,
                            AvailableQty = 8,
                            BicycleSizeId = 2,
                            ProductId = 7
                        },
                        new
                        {
                            Id = 14,
                            AvailableQty = 6,
                            BicycleSizeId = 3,
                            ProductId = 8
                        },
                        new
                        {
                            Id = 15,
                            AvailableQty = 4,
                            BicycleSizeId = 4,
                            ProductId = 8
                        },
                        new
                        {
                            Id = 16,
                            AvailableQty = 8,
                            BicycleSizeId = 1,
                            ProductId = 9
                        });
                });

            modelBuilder.Entity("PULSE.Services.Data.BicycleSize", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Size")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.ToTable("BicycleSize", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Size = "M"
                        },
                        new
                        {
                            Id = 2,
                            Size = "S"
                        },
                        new
                        {
                            Id = 3,
                            Size = "L"
                        },
                        new
                        {
                            Id = 4,
                            Size = "XL"
                        });
                });

            modelBuilder.Entity("PULSE.Services.Data.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Brand", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "TREK"
                        },
                        new
                        {
                            Id = 2,
                            Name = "CUBE"
                        },
                        new
                        {
                            Id = 3,
                            Name = "GIANT"
                        },
                        new
                        {
                            Id = 4,
                            Name = "MERIDA"
                        },
                        new
                        {
                            Id = 5,
                            Name = "SCOTT"
                        });
                });

            modelBuilder.Entity("PULSE.Services.Data.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordSalt")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("ShippingInfoId")
                        .HasColumnType("int")
                        .HasColumnName("ShippingInfoID");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Username")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ShippingInfoId");

                    b.ToTable("Customer", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2022, 8, 25, 14, 58, 56, 843, DateTimeKind.Unspecified),
                            Email = "djohnson@example.com",
                            FirstName = "Dwayne",
                            LastName = "Johnson",
                            PasswordHash = "MmGFoK5IT9yQmXu567Yh6ALLvbc=",
                            PasswordSalt = "0fut3gMif6mwIMaOBzUGYQ==",
                            PhoneNumber = "+111/222-3334",
                            Status = true,
                            UpdatedAt = new DateTime(2022, 8, 25, 14, 58, 56, 843, DateTimeKind.Unspecified),
                            Username = "djohnson"
                        });
                });

            modelBuilder.Entity("PULSE.Services.Data.OrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal?>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetail", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("OrderDetail");
                });

            modelBuilder.Entity("PULSE.Services.Data.OrderHeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<bool?>("Delivery")
                        .HasColumnType("bit");

                    b.Property<bool?>("OnlineOrder")
                        .HasColumnType("bit");

                    b.Property<string>("OrderNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("PaymentId")
                        .HasColumnType("int")
                        .HasColumnName("PaymentID");

                    b.Property<decimal?>("ShippingConst")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ShippingInfoId")
                        .HasColumnType("int")
                        .HasColumnName("ShippingInfoID");

                    b.Property<int?>("StaffId")
                        .HasColumnType("int");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("TimeDelivered")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("TimePacked")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("TimeProcessed")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("TimeShipped")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PaymentId");

                    b.HasIndex("ShippingInfoId");

                    b.HasIndex("StaffId");

                    b.ToTable("OrderHeader", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CustomerId = 1,
                            Delivery = true,
                            OnlineOrder = false,
                            OrderNumber = "ORD4371386",
                            PaymentId = 1,
                            ShippingConst = 123.00m,
                            ShippingInfoId = 1,
                            Status = 7,
                            TimeDelivered = new DateTime(2024, 8, 25, 21, 9, 47, 870, DateTimeKind.Unspecified),
                            TimePacked = new DateTime(2024, 8, 25, 20, 51, 41, 897, DateTimeKind.Unspecified),
                            TimeProcessed = new DateTime(2024, 8, 25, 20, 51, 29, 623, DateTimeKind.Unspecified),
                            TimeShipped = new DateTime(2024, 8, 25, 20, 57, 12, 727, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            CustomerId = 1,
                            Delivery = true,
                            OnlineOrder = false,
                            OrderNumber = "ORD4666406",
                            PaymentId = 2,
                            ShippingConst = 123.00m,
                            ShippingInfoId = 2,
                            Status = 5,
                            TimePacked = new DateTime(2024, 8, 25, 21, 23, 44, 133, DateTimeKind.Unspecified),
                            TimeProcessed = new DateTime(2024, 8, 25, 21, 23, 40, 760, DateTimeKind.Unspecified),
                            TimeShipped = new DateTime(2024, 8, 25, 21, 32, 43, 290, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("PULSE.Services.Data.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Method")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PaymentId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("TimeOfPayment")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("Payment", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 776.18m,
                            Method = "PayPal",
                            PaymentId = "PAYID-M3FH7UI2F8801196Y263471T",
                            TimeOfPayment = new DateTime(2024, 8, 25, 2, 50, 35, 970, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            Amount = 776.18m,
                            Method = "PayPal",
                            PaymentId = "PAYID-M3FIA6Y29T10926Y2305973M",
                            TimeOfPayment = new DateTime(2024, 8, 25, 2, 53, 25, 430, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("PULSE.Services.Data.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("BrandId")
                        .HasColumnType("int")
                        .HasColumnName("BrandID");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Model")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ProductCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("ProductCategoryID");

                    b.Property<string>("ProductNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("ThumbImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.ToTable("Product", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("Product");
                });

            modelBuilder.Entity("PULSE.Services.Data.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("ProductCategory", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("ProductCategory");
                });

            modelBuilder.Entity("PULSE.Services.Data.ProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("Data")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImage", (string)null);
                });

            modelBuilder.Entity("PULSE.Services.Data.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Role", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Administrator"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Mechanic"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Storekeeper"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Salesperson"
                        });
                });

            modelBuilder.Entity("PULSE.Services.Data.Servicing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<string>("CustomerRequest")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("LabourCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("OfferDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("OnlinePayment")
                        .HasColumnType("bit");

                    b.Property<int?>("PaymentId")
                        .HasColumnType("int")
                        .HasColumnName("PaymentID");

                    b.Property<string>("ServicingNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PaymentId");

                    b.ToTable("Servicing", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 8, 25, 14, 30, 0, 0, DateTimeKind.Unspecified),
                            CustomerId = 1,
                            CustomerRequest = "Replace the front wheel and adjust the brakes.",
                            LabourCost = 75.00m,
                            OfferDetails = "Discount on labour for first-time customers.",
                            OnlinePayment = false,
                            ServicingNumber = "SERV-234235211",
                            Status = 3,
                            UpdatedAt = new DateTime(2024, 8, 25, 14, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 8, 26, 10, 15, 0, 0, DateTimeKind.Unspecified),
                            CustomerId = 1,
                            CustomerRequest = "Full service and tune-up.",
                            LabourCost = 120.00m,
                            OfferDetails = "Includes free bike check-up with full service.",
                            OnlinePayment = false,
                            ServicingNumber = "SERV-345678912",
                            Status = 1,
                            UpdatedAt = new DateTime(2024, 8, 26, 10, 15, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("PULSE.Services.Data.ServicingPart", b =>
                {
                    b.Property<int>("ServicingId")
                        .HasColumnType("int")
                        .HasColumnName("ServicingID");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal?>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ServicingId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("ServicingPart", (string)null);

                    b.HasData(
                        new
                        {
                            ServicingId = 1,
                            ProductId = 17,
                            Quantity = 1,
                            UnitPrice = 89.99m
                        },
                        new
                        {
                            ServicingId = 1,
                            ProductId = 18,
                            Quantity = 2,
                            UnitPrice = 25.50m
                        },
                        new
                        {
                            ServicingId = 2,
                            ProductId = 16,
                            Quantity = 1,
                            UnitPrice = 34.99m
                        },
                        new
                        {
                            ServicingId = 2,
                            ProductId = 17,
                            Quantity = 1,
                            UnitPrice = 89.99m
                        },
                        new
                        {
                            ServicingId = 2,
                            ProductId = 18,
                            Quantity = 2,
                            UnitPrice = 25.50m
                        });
                });

            modelBuilder.Entity("PULSE.Services.Data.ShippingInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Country")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("StateOrProvince")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("StreetAddress")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.HasKey("Id");

                    b.ToTable("ShippingInfo", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "San Francisco",
                            Country = "United States",
                            StateOrProvince = "California",
                            StreetAddress = "123 Market Street",
                            ZipCode = "94107"
                        },
                        new
                        {
                            Id = 2,
                            City = "Toronto",
                            Country = "Canada",
                            StateOrProvince = "Ontario",
                            StreetAddress = "456 Queen Street West",
                            ZipCode = "M5A 1A1"
                        });
                });

            modelBuilder.Entity("PULSE.Services.Data.staff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DateOfEmployment")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordSalt")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Username")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Staff", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2022, 8, 25, 14, 58, 56, 843, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1990, 8, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfEmployment = new DateTime(2022, 8, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "jdoe@example.com",
                            FirstName = "John",
                            LastName = "Doe",
                            PasswordHash = "VXbqh5tz66lkaFI8gwiRyB29qbE=",
                            PasswordSalt = "LijOFjQrJ2ySPafDaJV89g==",
                            PhoneNumber = "+111/222-3334",
                            RoleId = 1,
                            Status = true,
                            UpdatedAt = new DateTime(2022, 8, 25, 14, 58, 56, 843, DateTimeKind.Unspecified),
                            Username = "jdoe"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2022, 8, 25, 14, 58, 56, 843, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1990, 8, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfEmployment = new DateTime(2022, 8, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "fthompson@example.com",
                            FirstName = "Frank",
                            LastName = "Thompson",
                            PasswordHash = "oRG/dpG4SrYERbbmWle2IHbZoyc=",
                            PasswordSalt = "8RclDZ3hTHXlWerCumSTNg==",
                            PhoneNumber = "+111/222-3334",
                            RoleId = 2,
                            Status = true,
                            UpdatedAt = new DateTime(2022, 8, 25, 14, 58, 56, 843, DateTimeKind.Unspecified),
                            Username = "fthompson"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2022, 8, 25, 14, 58, 56, 843, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1990, 8, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfEmployment = new DateTime(2022, 8, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mhenry@example.com",
                            FirstName = "Mark",
                            LastName = "Henry",
                            PasswordHash = "4chVLh8LhushFpJHkrMLTppXSwE=",
                            PasswordSalt = "lKQAgzpznhbp136CMQzZrw==",
                            PhoneNumber = "+111/222-3334",
                            RoleId = 3,
                            Status = true,
                            UpdatedAt = new DateTime(2022, 8, 25, 14, 58, 56, 843, DateTimeKind.Unspecified),
                            Username = "mhenry"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2022, 8, 25, 14, 58, 56, 843, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1990, 8, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfEmployment = new DateTime(2022, 8, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "janed@example.com",
                            FirstName = "Jane",
                            LastName = "Doe",
                            PasswordHash = "76786KICD2CmHC06juN+BvqeHQg=",
                            PasswordSalt = "VFgOG9JbipvRqaul/+HqBg==",
                            PhoneNumber = "+111/222-3334",
                            RoleId = 4,
                            Status = true,
                            UpdatedAt = new DateTime(2022, 8, 25, 14, 58, 56, 843, DateTimeKind.Unspecified),
                            Username = "janed"
                        });
                });

            modelBuilder.Entity("PULSE.Services.Data.Bicycle", b =>
                {
                    b.HasBaseType("PULSE.Services.Data.Product");

                    b.Property<int?>("ProductionYear")
                        .HasColumnType("int");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("WheelSize")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasIndex("ProductCategoryId");

                    b.HasDiscriminator().HasValue("Bicycle");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BrandId = 1,
                            CreatedAt = new DateTime(2021, 9, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A high-performance mountain bike designed for rugged terrains with excellent shock absorption and durability.",
                            Discriminator = "Bicycle",
                            Model = "Killer Zebra",
                            Price = 364.38m,
                            ProductCategoryId = 6,
                            ProductNumber = "QBXZ-BPZVPK9806",
                            UpdatedAt = new DateTime(2022, 7, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductionYear = 2010,
                            Weight = 8.2300m,
                            WheelSize = "26"
                        },
                        new
                        {
                            Id = 2,
                            BrandId = 1,
                            CreatedAt = new DateTime(2022, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A premium road bike with a sleek design, perfect for speed enthusiasts and long-distance riders.",
                            Discriminator = "Bicycle",
                            Model = "Nile Crocodile",
                            Price = 3201.41m,
                            ProductCategoryId = 6,
                            ProductNumber = "WJCM-IOXOZG4968",
                            UpdatedAt = new DateTime(2022, 7, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductionYear = 2013,
                            Weight = 8.4600m,
                            WheelSize = "29"
                        },
                        new
                        {
                            Id = 3,
                            BrandId = 2,
                            CreatedAt = new DateTime(2022, 2, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A versatile hybrid bike suitable for both city commuting and off-road adventures with a comfortable ride.",
                            Discriminator = "Bicycle",
                            Model = "Plains Zebra",
                            Price = 2900.49m,
                            ProductCategoryId = 6,
                            ProductNumber = "TDMC-QYYRUC9454",
                            UpdatedAt = new DateTime(2022, 7, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductionYear = 2012,
                            Weight = 9.0800m,
                            WheelSize = "29"
                        },
                        new
                        {
                            Id = 4,
                            BrandId = 3,
                            CreatedAt = new DateTime(2021, 8, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A durable and robust mountain bike designed to handle the most challenging trails and rough terrains.",
                            Discriminator = "Bicycle",
                            Model = "Northern Elephant Seal",
                            Price = 2693.16m,
                            ProductCategoryId = 5,
                            ProductNumber = "LGVC-JWCPLB2398",
                            UpdatedAt = new DateTime(2022, 7, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductionYear = 2011,
                            Weight = 9.7100m,
                            WheelSize = "26"
                        },
                        new
                        {
                            Id = 5,
                            BrandId = 4,
                            CreatedAt = new DateTime(2022, 4, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A sleek and lightweight bike ideal for city commuting and daily rides, featuring a modern design and efficient performance.",
                            Discriminator = "Bicycle",
                            Model = "Curlew, Black",
                            Price = 709.01m,
                            ProductCategoryId = 6,
                            ProductNumber = "UGBJ-KSQIJM0190",
                            UpdatedAt = new DateTime(2022, 7, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductionYear = 2010,
                            Weight = 10.0200m,
                            WheelSize = "29"
                        },
                        new
                        {
                            Id = 6,
                            BrandId = 4,
                            CreatedAt = new DateTime(2022, 3, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A high-end road bike with exceptional speed and aerodynamics, designed for competitive cyclists and enthusiasts.",
                            Discriminator = "Bicycle",
                            Model = "Kookaburra, Laughing",
                            Price = 993.63m,
                            ProductCategoryId = 6,
                            ProductNumber = "EQKX-QCOLYA9831",
                            UpdatedAt = new DateTime(2022, 7, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductionYear = 2013,
                            Weight = 17.0200m,
                            WheelSize = "29"
                        },
                        new
                        {
                            Id = 7,
                            BrandId = 5,
                            CreatedAt = new DateTime(2022, 4, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A lightweight bike perfect for urban commuting with a stylish frame and efficient gear system.",
                            Discriminator = "Bicycle",
                            Model = "Black-winged Stilt",
                            Price = 473.14m,
                            ProductCategoryId = 6,
                            ProductNumber = "EAOK-QMEEBD8830",
                            UpdatedAt = new DateTime(2022, 7, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductionYear = 2020,
                            Weight = 17.3500m,
                            WheelSize = "29"
                        },
                        new
                        {
                            Id = 8,
                            BrandId = 5,
                            CreatedAt = new DateTime(2022, 6, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A robust and reliable bike designed for mixed-terrain riding with excellent suspension and durability.",
                            Discriminator = "Bicycle",
                            Model = "Pampa Gray Fox",
                            Price = 2827.99m,
                            ProductCategoryId = 5,
                            ProductNumber = "YYMS-JFQGVN8586",
                            UpdatedAt = new DateTime(2022, 7, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductionYear = 2022,
                            Weight = 5.6400m,
                            WheelSize = "29"
                        },
                        new
                        {
                            Id = 9,
                            BrandId = 1,
                            CreatedAt = new DateTime(2022, 5, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "An all-terrain bike built for adventure seekers, featuring high durability and advanced suspension.",
                            Discriminator = "Bicycle",
                            Model = "Caracara, Yellow",
                            Price = 1401.75m,
                            ProductCategoryId = 6,
                            ProductNumber = "ZICU-WPDGRN0328",
                            UpdatedAt = new DateTime(2022, 7, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductionYear = 2015,
                            Weight = 5.4100m,
                            WheelSize = "27.5"
                        });
                });

            modelBuilder.Entity("PULSE.Services.Data.BicycleCategory", b =>
                {
                    b.HasBaseType("PULSE.Services.Data.ProductCategory");

                    b.HasDiscriminator().HasValue("Bicycle");

                    b.HasData(
                        new
                        {
                            Id = 5,
                            Name = "MTB"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Road Bike"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Gravel Bike"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Kids Bike"
                        });
                });

            modelBuilder.Entity("PULSE.Services.Data.Gear", b =>
                {
                    b.HasBaseType("PULSE.Services.Data.Product");

                    b.Property<int?>("AvailableQty")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("int")
                        .HasColumnName("AvailableQty");

                    b.HasIndex("ProductCategoryId");

                    b.HasDiscriminator().HasValue("Gear");

                    b.HasData(
                        new
                        {
                            Id = 10,
                            BrandId = 1,
                            CreatedAt = new DateTime(2023, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Durable and easy-to-clean bottle for hydration during rides.",
                            Discriminator = "Gear",
                            Model = "Cycling Bottle",
                            Price = 8.99m,
                            ProductCategoryId = 3,
                            ProductNumber = "BTTL-2314ZK",
                            UpdatedAt = new DateTime(2023, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AvailableQty = 150
                        },
                        new
                        {
                            Id = 11,
                            BrandId = 1,
                            CreatedAt = new DateTime(2023, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Secure and adjustable bottle carrier for various bike frames.",
                            Discriminator = "Gear",
                            Model = "Bike Bottle Carrier",
                            Price = 16.99m,
                            ProductCategoryId = 4,
                            ProductNumber = "CCAR-7890LP",
                            UpdatedAt = new DateTime(2023, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AvailableQty = 80
                        },
                        new
                        {
                            Id = 12,
                            BrandId = 1,
                            CreatedAt = new DateTime(2023, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "High-definition action camera for capturing your adventures on the go.",
                            Discriminator = "Gear",
                            Model = "Action Camera 4",
                            Price = 149.99m,
                            ProductCategoryId = 4,
                            ProductNumber = "CAM4-5642QS",
                            UpdatedAt = new DateTime(2023, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AvailableQty = 45
                        },
                        new
                        {
                            Id = 13,
                            BrandId = 2,
                            CreatedAt = new DateTime(2023, 4, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Spacious and ergonomic rucksack with multiple compartments for all your cycling gear.",
                            Discriminator = "Gear",
                            Model = "Cycling Rucksack",
                            Price = 55.99m,
                            ProductCategoryId = 4,
                            ProductNumber = "RCKS-2904BN",
                            UpdatedAt = new DateTime(2023, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AvailableQty = 60
                        },
                        new
                        {
                            Id = 14,
                            BrandId = 2,
                            CreatedAt = new DateTime(2023, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "High-quality waterproof jacket designed for cycling in any weather.",
                            Discriminator = "Gear",
                            Model = "Waterproof Jacket",
                            Price = 89.99m,
                            ProductCategoryId = 4,
                            ProductNumber = "JCKT-3345GH",
                            UpdatedAt = new DateTime(2023, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AvailableQty = 70
                        },
                        new
                        {
                            Id = 15,
                            BrandId = 2,
                            CreatedAt = new DateTime(2023, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Bright and reliable illumination system to ensure visibility during night rides.",
                            Discriminator = "Gear",
                            Model = "Bike Illumination System",
                            Price = 39.99m,
                            ProductCategoryId = 4,
                            ProductNumber = "ILUM-4321FD",
                            UpdatedAt = new DateTime(2023, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AvailableQty = 85
                        });
                });

            modelBuilder.Entity("PULSE.Services.Data.GearCategory", b =>
                {
                    b.HasBaseType("PULSE.Services.Data.ProductCategory");

                    b.HasDiscriminator().HasValue("Gear");

                    b.HasData(
                        new
                        {
                            Id = 3,
                            Name = "Bottle"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Bottle Carrier"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Carrier"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Jacket"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Camera 4"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Rucksack"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Pouch"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Illumination"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Mudguard"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Basket"
                        });
                });

            modelBuilder.Entity("PULSE.Services.Data.OrderDetailBicycle", b =>
                {
                    b.HasBaseType("PULSE.Services.Data.OrderDetail");

                    b.Property<int?>("BicycleSizeId")
                        .HasColumnType("int")
                        .HasColumnName("BicycleSizeID");

                    b.HasIndex("BicycleSizeId");

                    b.HasDiscriminator().HasValue("Bicycle");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Discriminator = "Bicycle",
                            OrderId = 1,
                            ProductId = 1,
                            Quantity = 1,
                            UnitPrice = 364.38m,
                            BicycleSizeId = 1
                        },
                        new
                        {
                            Id = 2,
                            Discriminator = "Bicycle",
                            OrderId = 1,
                            ProductId = 3,
                            Quantity = 2,
                            UnitPrice = 2900.49m,
                            BicycleSizeId = 3
                        },
                        new
                        {
                            Id = 3,
                            Discriminator = "Bicycle",
                            OrderId = 2,
                            ProductId = 2,
                            Quantity = 1,
                            UnitPrice = 3201.41m,
                            BicycleSizeId = 2
                        },
                        new
                        {
                            Id = 4,
                            Discriminator = "Bicycle",
                            OrderId = 2,
                            ProductId = 5,
                            Quantity = 1,
                            UnitPrice = 709.01m,
                            BicycleSizeId = 4
                        });
                });

            modelBuilder.Entity("PULSE.Services.Data.OrderDetailGear", b =>
                {
                    b.HasBaseType("PULSE.Services.Data.OrderDetail");

                    b.HasDiscriminator().HasValue("Gear");

                    b.HasData(
                        new
                        {
                            Id = 9,
                            Discriminator = "Gear",
                            OrderId = 1,
                            ProductId = 13,
                            Quantity = 3,
                            UnitPrice = 27.99m
                        },
                        new
                        {
                            Id = 10,
                            Discriminator = "Gear",
                            OrderId = 1,
                            ProductId = 15,
                            Quantity = 2,
                            UnitPrice = 15.49m
                        },
                        new
                        {
                            Id = 11,
                            Discriminator = "Gear",
                            OrderId = 2,
                            ProductId = 10,
                            Quantity = 4,
                            UnitPrice = 12.99m
                        },
                        new
                        {
                            Id = 12,
                            Discriminator = "Gear",
                            OrderId = 2,
                            ProductId = 12,
                            Quantity = 1,
                            UnitPrice = 22.75m
                        });
                });

            modelBuilder.Entity("PULSE.Services.Data.OrderDetailPart", b =>
                {
                    b.HasBaseType("PULSE.Services.Data.OrderDetail");

                    b.HasDiscriminator().HasValue("Part");

                    b.HasData(
                        new
                        {
                            Id = 5,
                            Discriminator = "Part",
                            OrderId = 1,
                            ProductId = 16,
                            Quantity = 2,
                            UnitPrice = 34.99m
                        },
                        new
                        {
                            Id = 6,
                            Discriminator = "Part",
                            OrderId = 1,
                            ProductId = 17,
                            Quantity = 1,
                            UnitPrice = 89.99m
                        },
                        new
                        {
                            Id = 7,
                            Discriminator = "Part",
                            OrderId = 2,
                            ProductId = 18,
                            Quantity = 4,
                            UnitPrice = 25.50m
                        },
                        new
                        {
                            Id = 8,
                            Discriminator = "Part",
                            OrderId = 2,
                            ProductId = 19,
                            Quantity = 2,
                            UnitPrice = 45.75m
                        });
                });

            modelBuilder.Entity("PULSE.Services.Data.Part", b =>
                {
                    b.HasBaseType("PULSE.Services.Data.Product");

                    b.Property<int?>("AvailableQty")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("int")
                        .HasColumnName("AvailableQty");

                    b.HasIndex("ProductCategoryId");

                    b.HasDiscriminator().HasValue("Part");

                    b.HasData(
                        new
                        {
                            Id = 16,
                            BrandId = 1,
                            CreatedAt = new DateTime(2023, 7, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Comfortable and ergonomic bike seat for long rides.",
                            Discriminator = "Part",
                            Model = "Seat e",
                            Price = 49.99m,
                            ProductCategoryId = 5,
                            ProductNumber = "PSXY-1234AB",
                            UpdatedAt = new DateTime(2023, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AvailableQty = 150
                        },
                        new
                        {
                            Id = 17,
                            BrandId = 1,
                            CreatedAt = new DateTime(2023, 8, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Precision rear derailleur for smooth gear shifting.",
                            Discriminator = "Part",
                            Model = "Rear Derailleur",
                            Price = 89.99m,
                            ProductCategoryId = 5,
                            ProductNumber = "RDXY-5678CD",
                            UpdatedAt = new DateTime(2023, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AvailableQty = 80
                        },
                        new
                        {
                            Id = 18,
                            BrandId = 1,
                            CreatedAt = new DateTime(2023, 8, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "High-performance V-brake for reliable stopping power.",
                            Discriminator = "Part",
                            Model = "V-Brake",
                            Price = 29.99m,
                            ProductCategoryId = 5,
                            ProductNumber = "VBRA-9101EF",
                            UpdatedAt = new DateTime(2023, 8, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AvailableQty = 120
                        },
                        new
                        {
                            Id = 19,
                            BrandId = 2,
                            CreatedAt = new DateTime(2023, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Durable disk brake for superior braking performance.",
                            Discriminator = "Part",
                            Model = "Disk Brake",
                            Price = 119.99m,
                            ProductCategoryId = 5,
                            ProductNumber = "DBRK-2345GH",
                            UpdatedAt = new DateTime(2023, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AvailableQty = 60
                        });
                });

            modelBuilder.Entity("PULSE.Services.Data.PartCategory", b =>
                {
                    b.HasBaseType("PULSE.Services.Data.ProductCategory");

                    b.HasDiscriminator().HasValue("Part");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Wheel"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Tire"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Seat"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Rear Derailleur"
                        },
                        new
                        {
                            Id = 18,
                            Name = "V-Brake"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Disk Brake"
                        });
                });

            modelBuilder.Entity("PULSE.Services.Data.AvailableSize", b =>
                {
                    b.HasOne("PULSE.Services.Data.BicycleSize", "BicycleSize")
                        .WithMany("AvailableSizes")
                        .HasForeignKey("BicycleSizeId")
                        .IsRequired()
                        .HasConstraintName("FK_AvailableSize_BicycleSize");

                    b.HasOne("PULSE.Services.Data.Bicycle", "Product")
                        .WithMany("AvailableSizes")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_AvailableSize_Bicycle");

                    b.Navigation("BicycleSize");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("PULSE.Services.Data.Customer", b =>
                {
                    b.HasOne("PULSE.Services.Data.ShippingInfo", "ShippingInfo")
                        .WithMany("Customers")
                        .HasForeignKey("ShippingInfoId")
                        .HasConstraintName("FK_Customer_ShippingInfo");

                    b.Navigation("ShippingInfo");
                });

            modelBuilder.Entity("PULSE.Services.Data.OrderDetail", b =>
                {
                    b.HasOne("PULSE.Services.Data.OrderHeader", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_OrderDetail_Order");

                    b.HasOne("PULSE.Services.Data.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_OrderDetail_Product");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("PULSE.Services.Data.OrderHeader", b =>
                {
                    b.HasOne("PULSE.Services.Data.Customer", "Customer")
                        .WithMany("OrderHeaders")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_OrderHeader_Customer");

                    b.HasOne("PULSE.Services.Data.Payment", "Payment")
                        .WithMany()
                        .HasForeignKey("PaymentId")
                        .HasConstraintName("FK_OrderHeader_Payment");

                    b.HasOne("PULSE.Services.Data.ShippingInfo", "ShippingInfo")
                        .WithMany("OrderHeaders")
                        .HasForeignKey("ShippingInfoId")
                        .HasConstraintName("FK_OrderHeader_ShippingInfo");

                    b.HasOne("PULSE.Services.Data.staff", "Staff")
                        .WithMany("Orders")
                        .HasForeignKey("StaffId")
                        .HasConstraintName("FK_OrderHeader_Staff");

                    b.Navigation("Customer");

                    b.Navigation("Payment");

                    b.Navigation("ShippingInfo");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("PULSE.Services.Data.Product", b =>
                {
                    b.HasOne("PULSE.Services.Data.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .HasConstraintName("FK_Product_Brand");

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("PULSE.Services.Data.ProductImage", b =>
                {
                    b.HasOne("PULSE.Services.Data.Product", "Product")
                        .WithMany("Images")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .HasConstraintName("FK_ProductImage_Product");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("PULSE.Services.Data.Servicing", b =>
                {
                    b.HasOne("PULSE.Services.Data.Customer", "Customer")
                        .WithMany("Servicings")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_Servicing_Customer");

                    b.HasOne("PULSE.Services.Data.Payment", "Payment")
                        .WithMany()
                        .HasForeignKey("PaymentId")
                        .HasConstraintName("FK_Servicing_Payment");

                    b.Navigation("Customer");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("PULSE.Services.Data.ServicingPart", b =>
                {
                    b.HasOne("PULSE.Services.Data.Product", "Product")
                        .WithMany("ServicingParts")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_ServicingPart_Part");

                    b.HasOne("PULSE.Services.Data.Servicing", "Servicing")
                        .WithMany("ServicingParts")
                        .HasForeignKey("ServicingId")
                        .IsRequired()
                        .HasConstraintName("FK_ServicingPart_Servicing");

                    b.Navigation("Product");

                    b.Navigation("Servicing");
                });

            modelBuilder.Entity("PULSE.Services.Data.staff", b =>
                {
                    b.HasOne("PULSE.Services.Data.Role", "Role")
                        .WithMany("staff")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_Staff_Role");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("PULSE.Services.Data.Bicycle", b =>
                {
                    b.HasOne("PULSE.Services.Data.BicycleCategory", "ProductCategory")
                        .WithMany("Bicycle")
                        .HasForeignKey("ProductCategoryId")
                        .HasConstraintName("FK_Product_ProductCategory");

                    b.Navigation("ProductCategory");
                });

            modelBuilder.Entity("PULSE.Services.Data.Gear", b =>
                {
                    b.HasOne("PULSE.Services.Data.GearCategory", "ProductCategory")
                        .WithMany("Gear")
                        .HasForeignKey("ProductCategoryId")
                        .HasConstraintName("FK_Product_ProductCategory");

                    b.Navigation("ProductCategory");
                });

            modelBuilder.Entity("PULSE.Services.Data.OrderDetailBicycle", b =>
                {
                    b.HasOne("PULSE.Services.Data.BicycleSize", "BicycleSize")
                        .WithMany("OrderDetails")
                        .HasForeignKey("BicycleSizeId")
                        .HasConstraintName("FK_OrderDetail_BicycleSize");

                    b.Navigation("BicycleSize");
                });

            modelBuilder.Entity("PULSE.Services.Data.Part", b =>
                {
                    b.HasOne("PULSE.Services.Data.PartCategory", "ProductCategory")
                        .WithMany("Part")
                        .HasForeignKey("ProductCategoryId")
                        .HasConstraintName("FK_Product_ProductCategory");

                    b.Navigation("ProductCategory");
                });

            modelBuilder.Entity("PULSE.Services.Data.BicycleSize", b =>
                {
                    b.Navigation("AvailableSizes");

                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("PULSE.Services.Data.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("PULSE.Services.Data.Customer", b =>
                {
                    b.Navigation("OrderHeaders");

                    b.Navigation("Servicings");
                });

            modelBuilder.Entity("PULSE.Services.Data.OrderHeader", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("PULSE.Services.Data.Product", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("OrderDetails");

                    b.Navigation("ServicingParts");
                });

            modelBuilder.Entity("PULSE.Services.Data.Role", b =>
                {
                    b.Navigation("staff");
                });

            modelBuilder.Entity("PULSE.Services.Data.Servicing", b =>
                {
                    b.Navigation("ServicingParts");
                });

            modelBuilder.Entity("PULSE.Services.Data.ShippingInfo", b =>
                {
                    b.Navigation("Customers");

                    b.Navigation("OrderHeaders");
                });

            modelBuilder.Entity("PULSE.Services.Data.staff", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("PULSE.Services.Data.Bicycle", b =>
                {
                    b.Navigation("AvailableSizes");
                });

            modelBuilder.Entity("PULSE.Services.Data.BicycleCategory", b =>
                {
                    b.Navigation("Bicycle");
                });

            modelBuilder.Entity("PULSE.Services.Data.GearCategory", b =>
                {
                    b.Navigation("Gear");
                });

            modelBuilder.Entity("PULSE.Services.Data.PartCategory", b =>
                {
                    b.Navigation("Part");
                });
#pragma warning restore 612, 618
        }
    }
}
