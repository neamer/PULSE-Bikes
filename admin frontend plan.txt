

Most screens are going to be a variation of the list screens

  +------------------------------------+
  | TITLE                      ACTIONS |
  |                                    |
  | FILTERS                            |
  |                                    |
  | CONTENT                            |
  |                                    |
  |                                    |
  |                                    |
  |                                    |
  |                                    |
  +------------------------------------+

  SPECIFIC PAGE COMPONENT

    GENERIC PAGE COMPONENT

      filters state

      fetch / refetch logic
      
      


  Each page will need a wrapper component to manage state / additional screens.

  Title and actions should be pretty straightforward

  FILTERS section:

    state should be managed inside the 

  # FILTERS STRATEGY

  The current setup is to pass down filters, which will inherit ListPageFilters with the filters that extend AbstractFilter

  In the ListPage constructor, it will then register the onSearch event.

  This is bad because our components are mutable, but it should not cause any issues right now

  To investigate:

    The main issue that we have here is the declaration hierarchy. Specifically, our filter component will get instantiated in the specifi list page, and will be used in the generic one:

    So for this component tree:

    SPECIFIC LIST PAGE

      GENERIC LIST PAGE

        FILTERS
        

    we will get this declaration tree?

    SPECIFIC LIST PAGE

    declares FILTERS
    
      GENERIC LIST PAGE filters passed down.
    
    ----

    The generic way can't be used because you can't instantiate generics. Instead, I opted for moving all the filter state from the base class to the new ones and makingHjk